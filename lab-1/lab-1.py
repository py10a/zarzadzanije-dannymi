#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ 1: –†–æ–±–æ—Ç–∞ –∑ JSON —É Python
–ü—Ä–∏–∫–ª–∞–¥–∏ —Ä–æ–±–æ—Ç–∏ –∑ JSON —Ñ–∞–π–ª–∞–º–∏
"""

import json
import os
from typing import Dict, List, Any

def load_json_file(file_path: str) -> Dict[str, Any]:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON —Ñ–∞–π–ª—É
    
    Args:
        file_path (str): –®–ª—è—Ö –¥–æ JSON —Ñ–∞–π–ª—É
        
    Returns:
        Dict[str, Any]: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
        print(f"‚úÖ –§–∞–π–ª {file_path} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        return data
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return {}
    except json.JSONDecodeError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON: {e}")
        return {}

def save_json_file(data: Dict[str, Any], file_path: str, indent: int = 2) -> bool:
    """
    –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É JSON —Ñ–∞–π–ª
    
    Args:
        data (Dict[str, Any]): –î–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        file_path (str): –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
        indent (int): –í—ñ–¥—Å—Ç—É–ø –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        
    Returns:
        bool: True —è–∫—â–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ
    """
    try:
        with open(file_path, 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=indent)
        print(f"‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª {file_path}")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
        return False

def analyze_json_structure(data: Dict[str, Any], max_items: int = 5) -> None:
    """
    –ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ JSON –¥–∞–Ω–∏—Ö
    
    Args:
        data (Dict[str, Any]): –î–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        max_items (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –ø–æ–∫–∞–∑—É
    """
    print("\nüìä –ê–ù–ê–õ–Ü–ó –°–¢–†–£–ö–¢–£–†–ò JSON:")
    print(f"–¢–∏–ø –¥–∞–Ω–∏—Ö: {type(data)}")
    print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: {len(data)}")
    
    if isinstance(data, dict):
        print(f"–ö–ª—é—á—ñ (–ø–µ—Ä—à—ñ {min(max_items, len(data))}):")
        for i, key in enumerate(list(data.keys())[:max_items]):
            value = data[key]
            print(f"  {i+1}. '{key}' -> {type(value).__name__}: {str(value)[:50]}...")
        
        if len(data) > max_items:
            print(f"  ... —Ç–∞ —â–µ {len(data) - max_items} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
    
    elif isinstance(data, list):
        print(f"–ï–ª–µ–º–µ–Ω—Ç–∏ (–ø–µ—Ä—à—ñ {min(max_items, len(data))}):")
        for i, item in enumerate(data[:max_items]):
            print(f"  {i+1}. {type(item).__name__}: {str(item)[:50]}...")
        
        if len(data) > max_items:
            print(f"  ... —Ç–∞ —â–µ {len(data) - max_items} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")

def search_in_json(data: Dict[str, Any], search_term: str) -> List[tuple]:
    """
    –ü–æ—à—É–∫ —É JSON –¥–∞–Ω–∏—Ö
    
    Args:
        data (Dict[str, Any]): –î–∞–Ω—ñ –¥–ª—è –ø–æ—à—É–∫—É
        search_term (str): –¢–µ—Ä–º—ñ–Ω –¥–ª—è –ø–æ—à—É–∫—É
        
    Returns:
        List[tuple]: –°–ø–∏—Å–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –ø–∞—Ä (–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–Ω—è)
    """
    results = []
    search_term_lower = search_term.lower()
    
    if isinstance(data, dict):
        for key, value in data.items():
            # –ü–æ—à—É–∫ —É –∫–ª—é—á—ñ
            if search_term_lower in key.lower():
                results.append((key, value))
            # –ü–æ—à—É–∫ —É –∑–Ω–∞—á–µ–Ω–Ω—ñ (—è–∫—â–æ —Ü–µ —Ä—è–¥–æ–∫)
            elif isinstance(value, str) and search_term_lower in value.lower():
                results.append((key, value))
            # –ü–æ—à—É–∫ —É —Å–ø–∏—Å–∫—É –∑–Ω–∞—á–µ–Ω—å
            elif isinstance(value, list):
                for item in value:
                    if isinstance(item, str) and search_term_lower in item.lower():
                        results.append((key, value))
                        break
    
    return results

def filter_json_data(data: Dict[str, Any], filter_func) -> Dict[str, Any]:
    """
    –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è JSON –¥–∞–Ω–∏—Ö –∑–∞ —Ñ—É–Ω–∫—Ü—ñ—î—é
    
    Args:
        data (Dict[str, Any]): –î–∞–Ω—ñ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        filter_func: –§—É–Ω–∫—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó (key, value) -> bool
        
    Returns:
        Dict[str, Any]: –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
    """
    return {key: value for key, value in data.items() if filter_func(key, value)}

def create_sample_json() -> Dict[str, Any]:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—É JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
    
    Returns:
        Dict[str, Any]: –ü—Ä–∏–∫–ª–∞–¥ JSON –¥–∞–Ω–∏—Ö
    """
    sample_data = {
        "users": [
            {
                "id": 1,
                "name": "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ",
                "email": "ivan@example.com",
                "age": 25,
                "is_active": True,
                "hobbies": ["–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è", "—á–∏—Ç–∞–Ω–Ω—è", "—Å–ø–æ—Ä—Ç"]
            },
            {
                "id": 2,
                "name": "–ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ",
                "email": "maria@example.com",
                "age": 30,
                "is_active": False,
                "hobbies": ["–º—É–∑–∏–∫–∞", "–ø–æ–¥–æ—Ä–æ–∂—ñ"]
            }
        ],
        "settings": {
            "language": "uk",
            "theme": "dark",
            "notifications": True
        },
        "metadata": {
            "created_at": "2024-01-15T10:30:00Z",
            "version": "1.0.0",
            "author": "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞"
        }
    }
    return sample_data

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏ —Ä–æ–±–æ—Ç–∏ –∑ JSON"""
    print("üîß –ü–†–ò–ö–õ–ê–î–ò –†–û–ë–û–¢–ò –ó JSON –£ PYTHON")
    print("=" * 50)
    
    # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ JSON —Ñ–∞–π–ª—É
    print("\n1Ô∏è‚É£ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø JSON –§–ê–ô–õ–£:")
    data = load_json_file("data.json")
    
    if data:
        analyze_json_structure(data, max_items=3)
        
        # 2. –ü–æ—à—É–∫ —É –¥–∞–Ω–∏—Ö
        print("\n2Ô∏è‚É£ –ü–û–®–£–ö –£ JSON –î–ê–ù–ò–•:")
        search_results = search_in_json(data, "computer")
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è 'computer':")
        for i, (key, value) in enumerate(search_results[:3]):
            print(f"  {i+1}. –ö–ª—é—á: '{key}'")
            if isinstance(value, list):
                print(f"     –ó–Ω–∞—á–µ–Ω–Ω—è: {value[0] if value else '–ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫'}...")
            else:
                print(f"     –ó–Ω–∞—á–µ–Ω–Ω—è: {str(value)[:100]}...")
        
        # 3. –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
        print("\n3Ô∏è‚É£ –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø JSON –î–ê–ù–ò–•:")
        # –§—ñ–ª—å—Ç—Ä: —Ç—ñ–ª—å–∫–∏ –∫–ª—é—á—ñ, —â–æ –º—ñ—Å—Ç—è—Ç—å "computer"
        computer_terms = filter_json_data(data, lambda k, v: "computer" in k.lower())
        print(f"–ö–ª—é—á—ñ –∑ 'computer': {list(computer_terms.keys())[:5]}")
        
        # –§—ñ–ª—å—Ç—Ä: —Ç—ñ–ª—å–∫–∏ –∫–æ—Ä–æ—Ç–∫—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (–º–µ–Ω—à–µ 50 —Å–∏–º–≤–æ–ª—ñ–≤)
        short_values = filter_json_data(data, lambda k, v: isinstance(v, str) and len(v) < 50)
        print(f"–ö–æ—Ä–æ—Ç–∫—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (–ø–µ—Ä—à—ñ 3): {list(short_values.items())[:3]}")
    
    # 4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ JSON
    print("\n4Ô∏è‚É£ –°–¢–í–û–†–ï–ù–ù–Ø –ù–û–í–û–ì–û JSON:")
    sample_data = create_sample_json()
    print("–°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–∏–∫–ª–∞–¥ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∏:")
    print(json.dumps(sample_data, ensure_ascii=False, indent=2))
    
    # 5. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª
    print("\n5Ô∏è‚É£ –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø JSON –£ –§–ê–ô–õ:")
    save_json_file(sample_data, "sample_output.json")
    
    # 6. –†–æ–±–æ—Ç–∞ –∑ JSON —Ä—è–¥–∫–∞–º–∏
    print("\n6Ô∏è‚É£ –†–û–ë–û–¢–ê –ó JSON –†–Ø–î–ö–ê–ú–ò:")
    json_string = '{"name": "–¢–µ—Å—Ç", "numbers": [1, 2, 3], "nested": {"key": "value"}}'
    print(f"JSON —Ä—è–¥–æ–∫: {json_string}")
    
    # –ü–∞—Ä—Å–∏–Ω–≥ JSON —Ä—è–¥–∫–∞
    parsed_data = json.loads(json_string)
    print(f"–ü–∞—Ä—Å–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ: {parsed_data}")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –Ω–∞–∑–∞–¥ —É —Ä—è–¥–æ–∫
    back_to_string = json.dumps(parsed_data, ensure_ascii=False, indent=2)
    print(f"–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —É —Ä—è–¥–æ–∫:\n{back_to_string}")
    
    # 7. –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    print("\n7Ô∏è‚É£ –û–ë–†–û–ë–ö–ê –ü–û–ú–ò–õ–û–ö:")
    invalid_json = '{"name": "–¢–µ—Å—Ç", "numbers": [1, 2, 3], "nested": {"key": "value"}'  # –í—ñ–¥—Å—É—Ç–Ω—è –∑–∞–∫—Ä–∏–≤–∞—é—á–∞ –¥—É–∂–∫–∞
    try:
        json.loads(invalid_json)
    except json.JSONDecodeError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ JSON: {e}")
    
    print("\n‚úÖ –í—Å—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
